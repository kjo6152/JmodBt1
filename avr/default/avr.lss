
avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000400  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800100  00800100  00000474  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000474  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000bc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000149  00000000  00000000  00000be5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000040d  00000000  00000000  00000d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001e5  00000000  00000000  0000113b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000053c  00000000  00000000  00001320  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  0000185c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001eb  00000000  00000000  0000199c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f4  00000000  00000000  00001b87  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000038  00000000  00000000  00001c7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 66 01 	jmp	0x2cc	; 0x2cc <__vector_5>
  18:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__vector_6>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a6 30       	cpi	r26, 0x06	; 6
  a4:	b1 07       	cpc	r27, r17
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <main>
  ac:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <init_bluetooth>:

//블루투스 초기화 함수
void init_bluetooth()                               
{

    UCSR1B = 0x18;           // 송신 Transmit(TX), Receive(RX) Enable
  b4:	88 e1       	ldi	r24, 0x18	; 24
  b6:	80 93 9a 00 	sts	0x009A, r24
    UCSR1C = 0x06;          // UART Mode, 8 Bit Data, No Parity, 1 Stop Bit
  ba:	86 e0       	ldi	r24, 0x06	; 6
  bc:	80 93 9d 00 	sts	0x009D, r24

    UBRR1H = 0;  // Baudrate 세팅
  c0:	10 92 98 00 	sts	0x0098, r1
    UBRR1L = 8;   // 16Mhz, 115200 baud
  c4:	88 e0       	ldi	r24, 0x08	; 8
  c6:	80 93 99 00 	sts	0x0099, r24

}
  ca:	08 95       	ret

000000cc <putchar1>:

// 1개의 문자를 스마트폰측으로 보내는 함수
void putchar1(char c)                      
{
	//데이터 송신 준비가 되었는지 체크
     while(!(UCSR1A & (1<<UDRE))) ;           
  cc:	90 91 9b 00 	lds	r25, 0x009B
  d0:	95 ff       	sbrs	r25, 5
  d2:	fc cf       	rjmp	.-8      	; 0xcc <putchar1>
	//송신할 데이터 설정                           
     UDR1 = c;                                             
  d4:	80 93 9c 00 	sts	0x009C, r24
}
  d8:	08 95       	ret

000000da <getchar1>:

// 1개의 문자를 스마트폰으로부터 받는 함수
char getchar1()                               // 1 문자를 수신(receive)하는 함수
{
	//데이터 수신 준비가 되었는지 체크
     if ((UCSR1A & (1<<RXC1))) {
  da:	80 91 9b 00 	lds	r24, 0x009B
  de:	87 ff       	sbrs	r24, 7
  e0:	03 c0       	rjmp	.+6      	; 0xe8 <getchar1+0xe>
	 	return(UDR1);						
  e2:	80 91 9c 00 	lds	r24, 0x009C
  e6:	08 95       	ret
	 }           
	//UDR1에서 수신 데이터를 가져옴                               
     return 0;								
  e8:	80 e0       	ldi	r24, 0x00	; 0
}
  ea:	08 95       	ret

000000ec <checkBluetooth>:

// 스마트폰으로부터 명령(데이터)을 받아서 응답해주고 버튼이 눌렸는지 리턴하는 함수
int checkBluetooth(){
  ec:	df 93       	push	r29
  ee:	cf 93       	push	r28
  f0:	0f 92       	push	r0
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
	volatile char c = getchar1();     
  f6:	0e 94 6d 00 	call	0xda	; 0xda <getchar1>
  fa:	89 83       	std	Y+1, r24	; 0x01
	if(c==1){
  fc:	89 81       	ldd	r24, Y+1	; 0x01
  fe:	81 30       	cpi	r24, 0x01	; 1
 100:	39 f4       	brne	.+14     	; 0x110 <checkBluetooth+0x24>
		putchar1(c);
 102:	89 81       	ldd	r24, Y+1	; 0x01
 104:	0e 94 66 00 	call	0xcc	; 0xcc <putchar1>
		c = 0;
 108:	19 82       	std	Y+1, r1	; 0x01
		return 1;
 10a:	21 e0       	ldi	r18, 0x01	; 1
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <checkBluetooth+0x28>
	}
	return 0;
 110:	20 e0       	ldi	r18, 0x00	; 0
 112:	30 e0       	ldi	r19, 0x00	; 0
}
 114:	c9 01       	movw	r24, r18
 116:	0f 90       	pop	r0
 118:	cf 91       	pop	r28
 11a:	df 91       	pop	r29
 11c:	08 95       	ret

0000011e <init_led>:
#include <avr/io.h>                         // AVR 기본 include

//LED 초기화
void init_led(){
	// KIT LED 포트 = PA7~PA0 : 출력
	DDRA = 0xff;
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	8a bb       	out	0x1a, r24	; 26
	// 전등(LED) 포트 = PG7~PG0 : 출력
	DDRG = 0xff;
 122:	80 93 64 00 	sts	0x0064, r24
}
 126:	08 95       	ret

00000128 <setKitLed>:

//Kit 기본 LED를 count 만큼 켠다.
void setKitLed(int count){
	int i;

	PORTA = 0;
 128:	1b ba       	out	0x1b, r1	; 27
	for(i=0;i<count;i++){
 12a:	20 e0       	ldi	r18, 0x00	; 0
 12c:	30 e0       	ldi	r19, 0x00	; 0
		PORTA |= 1 << i;
 12e:	41 e0       	ldi	r20, 0x01	; 1
 130:	50 e0       	ldi	r21, 0x00	; 0
//Kit 기본 LED를 count 만큼 켠다.
void setKitLed(int count){
	int i;

	PORTA = 0;
	for(i=0;i<count;i++){
 132:	0c c0       	rjmp	.+24     	; 0x14c <setKitLed+0x24>
		PORTA |= 1 << i;
 134:	eb b3       	in	r30, 0x1b	; 27
 136:	ba 01       	movw	r22, r20
 138:	02 2e       	mov	r0, r18
 13a:	02 c0       	rjmp	.+4      	; 0x140 <setKitLed+0x18>
 13c:	66 0f       	add	r22, r22
 13e:	77 1f       	adc	r23, r23
 140:	0a 94       	dec	r0
 142:	e2 f7       	brpl	.-8      	; 0x13c <setKitLed+0x14>
 144:	e6 2b       	or	r30, r22
 146:	eb bb       	out	0x1b, r30	; 27
//Kit 기본 LED를 count 만큼 켠다.
void setKitLed(int count){
	int i;

	PORTA = 0;
	for(i=0;i<count;i++){
 148:	2f 5f       	subi	r18, 0xFF	; 255
 14a:	3f 4f       	sbci	r19, 0xFF	; 255
 14c:	28 17       	cp	r18, r24
 14e:	39 07       	cpc	r19, r25
 150:	8c f3       	brlt	.-30     	; 0x134 <setKitLed+0xc>
		PORTA |= 1 << i;
	}
}
 152:	08 95       	ret

00000154 <setLight>:

//연결된 LED를 count만큼 켠다.
void setLight(int count){
	int i;

	PORTG = 0;
 154:	10 92 65 00 	sts	0x0065, r1
	for(i=0;i<count;i++){
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	30 e0       	ldi	r19, 0x00	; 0
		PORTG |= 1 << i;
 15c:	41 e0       	ldi	r20, 0x01	; 1
 15e:	50 e0       	ldi	r21, 0x00	; 0
//연결된 LED를 count만큼 켠다.
void setLight(int count){
	int i;

	PORTG = 0;
	for(i=0;i<count;i++){
 160:	0e c0       	rjmp	.+28     	; 0x17e <setLight+0x2a>
		PORTG |= 1 << i;
 162:	e0 91 65 00 	lds	r30, 0x0065
 166:	ba 01       	movw	r22, r20
 168:	02 2e       	mov	r0, r18
 16a:	02 c0       	rjmp	.+4      	; 0x170 <setLight+0x1c>
 16c:	66 0f       	add	r22, r22
 16e:	77 1f       	adc	r23, r23
 170:	0a 94       	dec	r0
 172:	e2 f7       	brpl	.-8      	; 0x16c <setLight+0x18>
 174:	e6 2b       	or	r30, r22
 176:	e0 93 65 00 	sts	0x0065, r30
//연결된 LED를 count만큼 켠다.
void setLight(int count){
	int i;

	PORTG = 0;
	for(i=0;i<count;i++){
 17a:	2f 5f       	subi	r18, 0xFF	; 255
 17c:	3f 4f       	sbci	r19, 0xFF	; 255
 17e:	28 17       	cp	r18, r24
 180:	39 07       	cpc	r19, r25
 182:	7c f3       	brlt	.-34     	; 0x162 <setLight+0xe>
		PORTG |= 1 << i;
	}
}
 184:	08 95       	ret

00000186 <init_adc>:

//조도센서 초기화
void init_adc(){
	ADMUX = 0x00;
 186:	17 b8       	out	0x07, r1	; 7
	ADCSRA = 0x87;
 188:	87 e8       	ldi	r24, 0x87	; 135
 18a:	86 b9       	out	0x06, r24	; 6
}
 18c:	08 95       	ret

0000018e <read_adc>:
//현재 조도 센서의 값을 읽어온다.
unsigned short read_adc()
{
	unsigned char adc_low, adc_high;
	unsigned short value;
	ADCSRA|=0x40;
 18e:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA & 0x10) !=0x10);
 190:	34 9b       	sbis	0x06, 4	; 6
 192:	fe cf       	rjmp	.-4      	; 0x190 <read_adc+0x2>
	adc_low=ADCL;
 194:	24 b1       	in	r18, 0x04	; 4
	adc_high=ADCH;
 196:	35 b1       	in	r19, 0x05	; 5
	value=((unsigned short)adc_high<<8)|(unsigned short)adc_low;
 198:	93 2f       	mov	r25, r19
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	28 2b       	or	r18, r24
 1a0:	39 2b       	or	r19, r25
	return value;
}
 1a2:	c9 01       	movw	r24, r18
 1a4:	08 95       	ret

000001a6 <get_auto>:

//Auto 모드일때 조도 센서의 값에 따라서 켜질 LED의 개수를 얻는다.
int get_auto()
{
 1a6:	df 93       	push	r29
 1a8:	cf 93       	push	r28
 1aa:	00 d0       	rcall	.+0      	; 0x1ac <get_auto+0x6>
 1ac:	cd b7       	in	r28, 0x3d	; 61
 1ae:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned short value = 0;
 1b0:	1a 82       	std	Y+2, r1	; 0x02
 1b2:	19 82       	std	Y+1, r1	; 0x01
	
	value = read_adc();
 1b4:	0e 94 c7 00 	call	0x18e	; 0x18e <read_adc>
 1b8:	9a 83       	std	Y+2, r25	; 0x02
 1ba:	89 83       	std	Y+1, r24	; 0x01

	if(value<400)return 3;
 1bc:	89 81       	ldd	r24, Y+1	; 0x01
 1be:	9a 81       	ldd	r25, Y+2	; 0x02
 1c0:	21 e0       	ldi	r18, 0x01	; 1
 1c2:	80 39       	cpi	r24, 0x90	; 144
 1c4:	92 07       	cpc	r25, r18
 1c6:	88 f0       	brcs	.+34     	; 0x1ea <get_auto+0x44>
	else if(value<600)return 2;
 1c8:	89 81       	ldd	r24, Y+1	; 0x01
 1ca:	9a 81       	ldd	r25, Y+2	; 0x02
 1cc:	22 e0       	ldi	r18, 0x02	; 2
 1ce:	88 35       	cpi	r24, 0x58	; 88
 1d0:	92 07       	cpc	r25, r18
 1d2:	70 f0       	brcs	.+28     	; 0x1f0 <get_auto+0x4a>
	else if(value<800)return 1;
 1d4:	89 81       	ldd	r24, Y+1	; 0x01
 1d6:	9a 81       	ldd	r25, Y+2	; 0x02
 1d8:	23 e0       	ldi	r18, 0x03	; 3
 1da:	80 32       	cpi	r24, 0x20	; 32
 1dc:	92 07       	cpc	r25, r18
 1de:	58 f0       	brcs	.+22     	; 0x1f6 <get_auto+0x50>
	else if(value<1000)return 0;
 1e0:	89 81       	ldd	r24, Y+1	; 0x01
 1e2:	9a 81       	ldd	r25, Y+2	; 0x02
 1e4:	20 e0       	ldi	r18, 0x00	; 0
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	08 c0       	rjmp	.+16     	; 0x1fa <get_auto+0x54>
{
	volatile unsigned short value = 0;
	
	value = read_adc();

	if(value<400)return 3;
 1ea:	23 e0       	ldi	r18, 0x03	; 3
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	05 c0       	rjmp	.+10     	; 0x1fa <get_auto+0x54>
	else if(value<600)return 2;
 1f0:	22 e0       	ldi	r18, 0x02	; 2
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <get_auto+0x54>
	else if(value<800)return 1;
 1f6:	21 e0       	ldi	r18, 0x01	; 1
 1f8:	30 e0       	ldi	r19, 0x00	; 0
	else if(value<1000)return 0;

	return 0;
}
 1fa:	c9 01       	movw	r24, r18
 1fc:	0f 90       	pop	r0
 1fe:	0f 90       	pop	r0
 200:	cf 91       	pop	r28
 202:	df 91       	pop	r29
 204:	08 95       	ret

00000206 <show_adc>:

//조도센서 관련 디버깅 함수
//조도값에 따라서 KIT의 LED를 조절한다.
void show_adc()
{
 206:	df 93       	push	r29
 208:	cf 93       	push	r28
 20a:	00 d0       	rcall	.+0      	; 0x20c <show_adc+0x6>
 20c:	cd b7       	in	r28, 0x3d	; 61
 20e:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned short value = 0;
 210:	1a 82       	std	Y+2, r1	; 0x02
 212:	19 82       	std	Y+1, r1	; 0x01
	setKitLed(1);
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 94 00 	call	0x128	; 0x128 <setKitLed>
	while(1)
	{
		value = read_adc();
 21c:	0e 94 c7 00 	call	0x18e	; 0x18e <read_adc>
 220:	9a 83       	std	Y+2, r25	; 0x02
 222:	89 83       	std	Y+1, r24	; 0x01
		//printf("value = %d\n",value);
		setKitLed(2);
 224:	82 e0       	ldi	r24, 0x02	; 2
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 94 00 	call	0x128	; 0x128 <setKitLed>
		if(value<200)setKitLed(6);
 22c:	89 81       	ldd	r24, Y+1	; 0x01
 22e:	9a 81       	ldd	r25, Y+2	; 0x02
 230:	88 3c       	cpi	r24, 0xC8	; 200
 232:	91 05       	cpc	r25, r1
 234:	18 f4       	brcc	.+6      	; 0x23c <show_adc+0x36>
 236:	86 e0       	ldi	r24, 0x06	; 6
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	23 c0       	rjmp	.+70     	; 0x282 <show_adc+0x7c>
		else if(value<400)setKitLed(5);
 23c:	89 81       	ldd	r24, Y+1	; 0x01
 23e:	9a 81       	ldd	r25, Y+2	; 0x02
 240:	21 e0       	ldi	r18, 0x01	; 1
 242:	80 39       	cpi	r24, 0x90	; 144
 244:	92 07       	cpc	r25, r18
 246:	18 f4       	brcc	.+6      	; 0x24e <show_adc+0x48>
 248:	85 e0       	ldi	r24, 0x05	; 5
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	1a c0       	rjmp	.+52     	; 0x282 <show_adc+0x7c>
		else if(value<600)setKitLed(4);
 24e:	89 81       	ldd	r24, Y+1	; 0x01
 250:	9a 81       	ldd	r25, Y+2	; 0x02
 252:	a2 e0       	ldi	r26, 0x02	; 2
 254:	88 35       	cpi	r24, 0x58	; 88
 256:	9a 07       	cpc	r25, r26
 258:	18 f4       	brcc	.+6      	; 0x260 <show_adc+0x5a>
 25a:	84 e0       	ldi	r24, 0x04	; 4
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	11 c0       	rjmp	.+34     	; 0x282 <show_adc+0x7c>
		else if(value<800)setKitLed(3);
 260:	89 81       	ldd	r24, Y+1	; 0x01
 262:	9a 81       	ldd	r25, Y+2	; 0x02
 264:	b3 e0       	ldi	r27, 0x03	; 3
 266:	80 32       	cpi	r24, 0x20	; 32
 268:	9b 07       	cpc	r25, r27
 26a:	18 f4       	brcc	.+6      	; 0x272 <show_adc+0x6c>
 26c:	83 e0       	ldi	r24, 0x03	; 3
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	08 c0       	rjmp	.+16     	; 0x282 <show_adc+0x7c>
		else if(value<1000)setKitLed(2);
 272:	89 81       	ldd	r24, Y+1	; 0x01
 274:	9a 81       	ldd	r25, Y+2	; 0x02
 276:	23 e0       	ldi	r18, 0x03	; 3
 278:	88 3e       	cpi	r24, 0xE8	; 232
 27a:	92 07       	cpc	r25, r18
 27c:	20 f4       	brcc	.+8      	; 0x286 <show_adc+0x80>
 27e:	82 e0       	ldi	r24, 0x02	; 2
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	0e 94 94 00 	call	0x128	; 0x128 <setKitLed>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 286:	8f e3       	ldi	r24, 0x3F	; 63
 288:	9d e0       	ldi	r25, 0x0D	; 13
 28a:	a3 e0       	ldi	r26, 0x03	; 3
 28c:	81 50       	subi	r24, 0x01	; 1
 28e:	90 40       	sbci	r25, 0x00	; 0
 290:	a0 40       	sbci	r26, 0x00	; 0
 292:	e1 f7       	brne	.-8      	; 0x28c <show_adc+0x86>
 294:	00 c0       	rjmp	.+0      	; 0x296 <show_adc+0x90>
 296:	00 00       	nop
 298:	c1 cf       	rjmp	.-126    	; 0x21c <show_adc+0x16>

0000029a <setNextState>:
//몇 개의 LED를 켜야하는지 저장하는 변수
volatile int ledCount = 0;

//전등을 다음 상태로 변경
void setNextState(){
	ledState = (ledState+1)%5;
 29a:	80 91 02 01 	lds	r24, 0x0102
 29e:	90 91 03 01 	lds	r25, 0x0103
 2a2:	01 96       	adiw	r24, 0x01	; 1
 2a4:	65 e0       	ldi	r22, 0x05	; 5
 2a6:	70 e0       	ldi	r23, 0x00	; 0
 2a8:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__divmodhi4>
 2ac:	90 93 03 01 	sts	0x0103, r25
 2b0:	80 93 02 01 	sts	0x0102, r24
}
 2b4:	08 95       	ret

000002b6 <onButtonClicked>:

//버튼이 클릭되었을 때 실행되는 함수, 전등을 다음 상태로 변경한다.
void onButtonClicked(){
	setNextState();
 2b6:	0e 94 4d 01 	call	0x29a	; 0x29a <setNextState>
}
 2ba:	08 95       	ret

000002bc <init_switch>:

//스위치 초기화
void init_switch(){
	DDRE = 0xcf; // 1100 1111, INT 4, 5
 2bc:	8f ec       	ldi	r24, 0xCF	; 207
 2be:	82 b9       	out	0x02, r24	; 2
	EICRB = 0x0a; // 0000 1010 INT 4, 5 => falling
 2c0:	8a e0       	ldi	r24, 0x0A	; 10
 2c2:	8a bf       	out	0x3a, r24	; 58
	EIMSK = 0x30; // 0011 0000 INT 4, 5
 2c4:	80 e3       	ldi	r24, 0x30	; 48
 2c6:	89 bf       	out	0x39, r24	; 57
	sei(); // SREG |= 1<<7; // 1000 0000
 2c8:	78 94       	sei
}
 2ca:	08 95       	ret

000002cc <__vector_5>:

//스위치1
SIGNAL(SIG_INTERRUPT4){
 2cc:	1f 92       	push	r1
 2ce:	0f 92       	push	r0
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	0f 92       	push	r0
 2d4:	11 24       	eor	r1, r1
 2d6:	8f 93       	push	r24
 2d8:	9f 93       	push	r25
	isButtonClicked = TRUE;
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	90 93 01 01 	sts	0x0101, r25
 2e2:	80 93 00 01 	sts	0x0100, r24
}
 2e6:	9f 91       	pop	r25
 2e8:	8f 91       	pop	r24
 2ea:	0f 90       	pop	r0
 2ec:	0f be       	out	0x3f, r0	; 63
 2ee:	0f 90       	pop	r0
 2f0:	1f 90       	pop	r1
 2f2:	18 95       	reti

000002f4 <__vector_6>:

//스위치2
SIGNAL(SIG_INTERRUPT5){
 2f4:	1f 92       	push	r1
 2f6:	0f 92       	push	r0
 2f8:	0f b6       	in	r0, 0x3f	; 63
 2fa:	0f 92       	push	r0
 2fc:	11 24       	eor	r1, r1
 2fe:	8f 93       	push	r24
 300:	9f 93       	push	r25
	isButtonClicked = TRUE;
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	90 93 01 01 	sts	0x0101, r25
 30a:	80 93 00 01 	sts	0x0100, r24

}
 30e:	9f 91       	pop	r25
 310:	8f 91       	pop	r24
 312:	0f 90       	pop	r0
 314:	0f be       	out	0x3f, r0	; 63
 316:	0f 90       	pop	r0
 318:	1f 90       	pop	r1
 31a:	18 95       	reti

0000031c <init>:

//초기화 함수
void init(){
	//조도센서 초기화
	init_adc();
 31c:	0e 94 c3 00 	call	0x186	; 0x186 <init_adc>
	//LED 초기화
	init_led();
 320:	0e 94 8f 00 	call	0x11e	; 0x11e <init_led>
	//스위치 초기화
	init_switch();
 324:	0e 94 5e 01 	call	0x2bc	; 0x2bc <init_switch>
	//블루투스 초기화
	init_bluetooth();		
 328:	0e 94 5a 00 	call	0xb4	; 0xb4 <init_bluetooth>
}
 32c:	08 95       	ret

0000032e <run>:

/**
 * 블루투스나 스위치의 명령이 들어왔을 때 적절한 처리를 하는 함수
 */
void run(){
 32e:	cf 93       	push	r28
 330:	df 93       	push	r29


	while(1)                       
    {
		//블루투스로부터 버튼 입력이 왔는지 확인한다.
		isButtonClicked |= checkBluetooth();		
 332:	c0 91 00 01 	lds	r28, 0x0100
 336:	d0 91 01 01 	lds	r29, 0x0101
 33a:	0e 94 76 00 	call	0xec	; 0xec <checkBluetooth>
 33e:	c8 2b       	or	r28, r24
 340:	d9 2b       	or	r29, r25
 342:	d0 93 01 01 	sts	0x0101, r29
 346:	c0 93 00 01 	sts	0x0100, r28
		
		//스위치나 블루투스로부터 버튼이 입력되었으면 상태를 변경한다.
		if(isButtonClicked){
 34a:	80 91 00 01 	lds	r24, 0x0100
 34e:	90 91 01 01 	lds	r25, 0x0101
 352:	00 97       	sbiw	r24, 0x00	; 0
 354:	31 f0       	breq	.+12     	; 0x362 <run+0x34>
			setNextState();
 356:	0e 94 4d 01 	call	0x29a	; 0x29a <setNextState>
			isButtonClicked = FALSE;
 35a:	10 92 01 01 	sts	0x0101, r1
 35e:	10 92 00 01 	sts	0x0100, r1
		}

		//AUTO모드일 경우 켤 LED의 개수를 구한다.
		if(ledState==STATE_AUTO){
 362:	80 91 02 01 	lds	r24, 0x0102
 366:	90 91 03 01 	lds	r25, 0x0103
 36a:	84 30       	cpi	r24, 0x04	; 4
 36c:	91 05       	cpc	r25, r1
 36e:	19 f4       	brne	.+6      	; 0x376 <run+0x48>
			ledCount = get_auto();
 370:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <get_auto>
 374:	04 c0       	rjmp	.+8      	; 0x37e <run+0x50>
		}
		else {
			ledCount = ledState;
 376:	80 91 02 01 	lds	r24, 0x0102
 37a:	90 91 03 01 	lds	r25, 0x0103
 37e:	90 93 05 01 	sts	0x0105, r25
 382:	80 93 04 01 	sts	0x0104, r24
		}

		//LED를 켠다.
		setKitLed(ledCount);
 386:	80 91 04 01 	lds	r24, 0x0104
 38a:	90 91 05 01 	lds	r25, 0x0105
 38e:	0e 94 94 00 	call	0x128	; 0x128 <setKitLed>
		setLight(ledCount); 
 392:	80 91 04 01 	lds	r24, 0x0104
 396:	90 91 05 01 	lds	r25, 0x0105
 39a:	0e 94 aa 00 	call	0x154	; 0x154 <setLight>
    }
 39e:	c9 cf       	rjmp	.-110    	; 0x332 <run+0x4>

000003a0 <main>:
}

int main()
{
	//디바이스 초기화
    init();
 3a0:	0e 94 8e 01 	call	0x31c	; 0x31c <init>
    //작업 수행
 	run();
 3a4:	0e 94 97 01 	call	0x32e	; 0x32e <run>

}
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	08 95       	ret

000003ae <__divmodhi4>:
 3ae:	97 fb       	bst	r25, 7
 3b0:	09 2e       	mov	r0, r25
 3b2:	07 26       	eor	r0, r23
 3b4:	0a d0       	rcall	.+20     	; 0x3ca <__divmodhi4_neg1>
 3b6:	77 fd       	sbrc	r23, 7
 3b8:	04 d0       	rcall	.+8      	; 0x3c2 <__divmodhi4_neg2>
 3ba:	0c d0       	rcall	.+24     	; 0x3d4 <__udivmodhi4>
 3bc:	06 d0       	rcall	.+12     	; 0x3ca <__divmodhi4_neg1>
 3be:	00 20       	and	r0, r0
 3c0:	1a f4       	brpl	.+6      	; 0x3c8 <__divmodhi4_exit>

000003c2 <__divmodhi4_neg2>:
 3c2:	70 95       	com	r23
 3c4:	61 95       	neg	r22
 3c6:	7f 4f       	sbci	r23, 0xFF	; 255

000003c8 <__divmodhi4_exit>:
 3c8:	08 95       	ret

000003ca <__divmodhi4_neg1>:
 3ca:	f6 f7       	brtc	.-4      	; 0x3c8 <__divmodhi4_exit>
 3cc:	90 95       	com	r25
 3ce:	81 95       	neg	r24
 3d0:	9f 4f       	sbci	r25, 0xFF	; 255
 3d2:	08 95       	ret

000003d4 <__udivmodhi4>:
 3d4:	aa 1b       	sub	r26, r26
 3d6:	bb 1b       	sub	r27, r27
 3d8:	51 e1       	ldi	r21, 0x11	; 17
 3da:	07 c0       	rjmp	.+14     	; 0x3ea <__udivmodhi4_ep>

000003dc <__udivmodhi4_loop>:
 3dc:	aa 1f       	adc	r26, r26
 3de:	bb 1f       	adc	r27, r27
 3e0:	a6 17       	cp	r26, r22
 3e2:	b7 07       	cpc	r27, r23
 3e4:	10 f0       	brcs	.+4      	; 0x3ea <__udivmodhi4_ep>
 3e6:	a6 1b       	sub	r26, r22
 3e8:	b7 0b       	sbc	r27, r23

000003ea <__udivmodhi4_ep>:
 3ea:	88 1f       	adc	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	5a 95       	dec	r21
 3f0:	a9 f7       	brne	.-22     	; 0x3dc <__udivmodhi4_loop>
 3f2:	80 95       	com	r24
 3f4:	90 95       	com	r25
 3f6:	bc 01       	movw	r22, r24
 3f8:	cd 01       	movw	r24, r26
 3fa:	08 95       	ret

000003fc <_exit>:
 3fc:	f8 94       	cli

000003fe <__stop_program>:
 3fe:	ff cf       	rjmp	.-2      	; 0x3fe <__stop_program>
