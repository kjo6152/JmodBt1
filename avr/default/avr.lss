
avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  000001ee  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000008bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000941  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000091  00000000  00000000  00000961  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000015d  00000000  00000000  000009f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000d4  00000000  00000000  00000b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001cf  00000000  00000000  00000c23  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  00000df4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000d5  00000000  00000000  00000e84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000001e  00000000  00000000  00000f59  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b1 07       	cpc	r27, r17
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  ac:	0c 94 bb 00 	jmp	0x176	; 0x176 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <init_uart1>:
 

void init_uart1()                               // UART1 초기화 함수
{

    UCSR1B = 0x18;           // 송신 Transmit(TX), Receive(RX) Enable
  b4:	88 e1       	ldi	r24, 0x18	; 24
  b6:	80 93 9a 00 	sts	0x009A, r24
    UCSR1C = 0x06;          // UART Mode, 8 Bit Data, No Parity, 1 Stop Bit
  ba:	86 e0       	ldi	r24, 0x06	; 6
  bc:	80 93 9d 00 	sts	0x009D, r24

    UBRR1H = 0;  // Baudrate 세팅
  c0:	10 92 98 00 	sts	0x0098, r1
    UBRR1L = 8;   // 16Mhz, 115200 baud
  c4:	88 e0       	ldi	r24, 0x08	; 8
  c6:	80 93 99 00 	sts	0x0099, r24

}
  ca:	08 95       	ret

000000cc <putchar1>:


void putchar1(char c)                      // 1 문자를 송신(Transmit)하는 함수
{

     while(!(UCSR1A & (1<<UDRE))) ;           // UDRE : UCSR1A 5번 비트, UDRE의 define값 = 5
  cc:	90 91 9b 00 	lds	r25, 0x009B
  d0:	95 ff       	sbrs	r25, 5
  d2:	fc cf       	rjmp	.-8      	; 0xcc <putchar1>
                                                                   // 즉, 1을 5번 왼쪽으로 shift한 값이므로 0x20과 &
     UDR1 = c;                                             // 1 문자 전송, 송신 데이터를 UDR0에 넣음
  d4:	80 93 9c 00 	sts	0x009C, r24
}
  d8:	08 95       	ret

000000da <getchar1>:
 

char getchar1()                               // 1 문자를 수신(receive)하는 함수
{

     while (!(UCSR1A & (1<<RXC1))) ;           // UCSR1A 7번 비트, RXC의 define 값 = 7
  da:	80 91 9b 00 	lds	r24, 0x009B
  de:	87 ff       	sbrs	r24, 7
  e0:	fc cf       	rjmp	.-8      	; 0xda <getchar1>
                                                                   // 즉, 1을 7번 왼쪽으로 shift한 값이므로 0x80과 &
     return(UDR1);                                       // 1 문자 수신, UDR1에서 수신 데이터를 가져옴
  e2:	80 91 9c 00 	lds	r24, 0x009C
}
  e6:	08 95       	ret

000000e8 <setNextState>:
#define 	STATE_AUTO		4

volatile int ledState = STATE_OFF;

void setNextState(){
	ledState = (ledState+1)%5;
  e8:	80 91 00 01 	lds	r24, 0x0100
  ec:	90 91 01 01 	lds	r25, 0x0101
  f0:	01 96       	adiw	r24, 0x01	; 1
  f2:	65 e0       	ldi	r22, 0x05	; 5
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	0e 94 94 00 	call	0x128	; 0x128 <__divmodhi4>
  fa:	90 93 01 01 	sts	0x0101, r25
  fe:	80 93 00 01 	sts	0x0100, r24
}
 102:	08 95       	ret

00000104 <setKitLed>:

void setKitLed(){

}
 104:	08 95       	ret

00000106 <setLight>:

void setLight(){

}
 106:	08 95       	ret

00000108 <onButtonClicked>:

void onButtonClicked(){
	setNextState();
 108:	0e 94 74 00 	call	0xe8	; 0xe8 <setNextState>

}
 10c:	08 95       	ret

0000010e <main>:

int main()
{
 10e:	1f 93       	push	r17

    char c;

    init_uart1();                 // UART1 초기화
 110:	0e 94 5a 00 	call	0xb4	; 0xb4 <init_uart1>
    DDRA = 0xff;  // 전등(LED) 포트 = PA7~PA0 : 출력
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	8a bb       	out	0x1a, r24	; 26
    DDRB = 0xff;  // 버저(버저) 포트 = PB4 및 선풍기(모터) 포트 = PB7~PB6 : 출력
 118:	87 bb       	out	0x17, r24	; 23
             c = getchar1();     // 스마트폰으로부터 명령(데이터)을 받아서
             switch(c)              // 명령의 종류에 따라 아래를 실행
             {

                 case 1:
				 	PORTA = 0xff;
 11a:	1f ef       	ldi	r17, 0xFF	; 255
 

    while(1)                       // 명령을 받아서 실행
    {

             c = getchar1();     // 스마트폰으로부터 명령(데이터)을 받아서
 11c:	0e 94 6d 00 	call	0xda	; 0xda <getchar1>
             switch(c)              // 명령의 종류에 따라 아래를 실행
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	e1 f7       	brne	.-8      	; 0x11c <main+0xe>
             {

                 case 1:
				 	PORTA = 0xff;
 124:	1b bb       	out	0x1b, r17	; 27
 126:	fa cf       	rjmp	.-12     	; 0x11c <main+0xe>

00000128 <__divmodhi4>:
 128:	97 fb       	bst	r25, 7
 12a:	09 2e       	mov	r0, r25
 12c:	07 26       	eor	r0, r23
 12e:	0a d0       	rcall	.+20     	; 0x144 <__divmodhi4_neg1>
 130:	77 fd       	sbrc	r23, 7
 132:	04 d0       	rcall	.+8      	; 0x13c <__divmodhi4_neg2>
 134:	0c d0       	rcall	.+24     	; 0x14e <__udivmodhi4>
 136:	06 d0       	rcall	.+12     	; 0x144 <__divmodhi4_neg1>
 138:	00 20       	and	r0, r0
 13a:	1a f4       	brpl	.+6      	; 0x142 <__divmodhi4_exit>

0000013c <__divmodhi4_neg2>:
 13c:	70 95       	com	r23
 13e:	61 95       	neg	r22
 140:	7f 4f       	sbci	r23, 0xFF	; 255

00000142 <__divmodhi4_exit>:
 142:	08 95       	ret

00000144 <__divmodhi4_neg1>:
 144:	f6 f7       	brtc	.-4      	; 0x142 <__divmodhi4_exit>
 146:	90 95       	com	r25
 148:	81 95       	neg	r24
 14a:	9f 4f       	sbci	r25, 0xFF	; 255
 14c:	08 95       	ret

0000014e <__udivmodhi4>:
 14e:	aa 1b       	sub	r26, r26
 150:	bb 1b       	sub	r27, r27
 152:	51 e1       	ldi	r21, 0x11	; 17
 154:	07 c0       	rjmp	.+14     	; 0x164 <__udivmodhi4_ep>

00000156 <__udivmodhi4_loop>:
 156:	aa 1f       	adc	r26, r26
 158:	bb 1f       	adc	r27, r27
 15a:	a6 17       	cp	r26, r22
 15c:	b7 07       	cpc	r27, r23
 15e:	10 f0       	brcs	.+4      	; 0x164 <__udivmodhi4_ep>
 160:	a6 1b       	sub	r26, r22
 162:	b7 0b       	sbc	r27, r23

00000164 <__udivmodhi4_ep>:
 164:	88 1f       	adc	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	5a 95       	dec	r21
 16a:	a9 f7       	brne	.-22     	; 0x156 <__udivmodhi4_loop>
 16c:	80 95       	com	r24
 16e:	90 95       	com	r25
 170:	bc 01       	movw	r22, r24
 172:	cd 01       	movw	r24, r26
 174:	08 95       	ret

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
