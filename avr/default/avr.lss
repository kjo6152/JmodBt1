
avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800100  00800100  0000043c  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  0000043c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000149  00000000  00000000  00000bad  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000042a  00000000  00000000  00000cf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000023b  00000000  00000000  00001120  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004fa  00000000  00000000  0000135b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  00001858  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001eb  00000000  00000000  00001998  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c0  00000000  00000000  00001b83  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000038  00000000  00000000  00001c43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__vector_5>
  18:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__vector_6>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a6 30       	cpi	r26, 0x06	; 6
  a4:	b1 07       	cpc	r27, r17
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 b4 01 	call	0x368	; 0x368 <main>
  ac:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <init_bluetooth>:

//블루투스 초기화 함수
void init_bluetooth()                               
{

    UCSR1B = 0x18;           // 송신 Transmit(TX), Receive(RX) Enable
  b4:	88 e1       	ldi	r24, 0x18	; 24
  b6:	80 93 9a 00 	sts	0x009A, r24
    UCSR1C = 0x06;          // UART Mode, 8 Bit Data, No Parity, 1 Stop Bit
  ba:	86 e0       	ldi	r24, 0x06	; 6
  bc:	80 93 9d 00 	sts	0x009D, r24

    UBRR1H = 0;  // Baudrate 세팅
  c0:	10 92 98 00 	sts	0x0098, r1
    UBRR1L = 8;   // 16Mhz, 115200 baud
  c4:	88 e0       	ldi	r24, 0x08	; 8
  c6:	80 93 99 00 	sts	0x0099, r24

}
  ca:	08 95       	ret

000000cc <putchar1>:

// 1개의 문자를 스마트폰측으로 보내는 함수
void putchar1(char c)                      
{
	//데이터 송신 준비가 되었는지 체크
     while(!(UCSR1A & (1<<UDRE))) ;           
  cc:	90 91 9b 00 	lds	r25, 0x009B
  d0:	95 ff       	sbrs	r25, 5
  d2:	fc cf       	rjmp	.-8      	; 0xcc <putchar1>
	//송신할 데이터 설정                           
     UDR1 = c;                                             
  d4:	80 93 9c 00 	sts	0x009C, r24
}
  d8:	08 95       	ret

000000da <getchar1>:

// 1개의 문자를 스마트폰으로부터 받는 함수
char getchar1()                               // 1 문자를 수신(receive)하는 함수
{
	//데이터 수신 준비가 되었는지 체크
     if ((UCSR1A & (1<<RXC1))) {
  da:	80 91 9b 00 	lds	r24, 0x009B
  de:	87 ff       	sbrs	r24, 7
  e0:	03 c0       	rjmp	.+6      	; 0xe8 <getchar1+0xe>
	 	return(UDR1);						
  e2:	80 91 9c 00 	lds	r24, 0x009C
  e6:	08 95       	ret
	 }           
	//UDR1에서 수신 데이터를 가져옴                               
     return 0;								
  e8:	80 e0       	ldi	r24, 0x00	; 0
}
  ea:	08 95       	ret

000000ec <checkBluetooth>:

// 스마트폰으로부터 명령(데이터)을 받아서 응답해주고 버튼이 눌린것으로 체크하는 함수
int checkBluetooth(){
  ec:	df 93       	push	r29
  ee:	cf 93       	push	r28
  f0:	0f 92       	push	r0
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
	volatile char c = getchar1();     
  f6:	0e 94 6d 00 	call	0xda	; 0xda <getchar1>
  fa:	89 83       	std	Y+1, r24	; 0x01
	if(c==1){
  fc:	89 81       	ldd	r24, Y+1	; 0x01
  fe:	81 30       	cpi	r24, 0x01	; 1
 100:	39 f4       	brne	.+14     	; 0x110 <checkBluetooth+0x24>
		putchar1(c);
 102:	89 81       	ldd	r24, Y+1	; 0x01
 104:	0e 94 66 00 	call	0xcc	; 0xcc <putchar1>
		c = 0;
 108:	19 82       	std	Y+1, r1	; 0x01
		return 1;
 10a:	21 e0       	ldi	r18, 0x01	; 1
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <checkBluetooth+0x28>
	}
	return 0;
 110:	20 e0       	ldi	r18, 0x00	; 0
 112:	30 e0       	ldi	r19, 0x00	; 0
}
 114:	c9 01       	movw	r24, r18
 116:	0f 90       	pop	r0
 118:	cf 91       	pop	r28
 11a:	df 91       	pop	r29
 11c:	08 95       	ret

0000011e <init_led>:
#include <avr/io.h>                         // AVR 기본 include

//LED 초기화
void init_led(){
	// 전등(LED) 포트 = PA7~PA0 : 출력
	DDRA = 0xff;
 11e:	8f ef       	ldi	r24, 0xFF	; 255
 120:	8a bb       	out	0x1a, r24	; 26
}
 122:	08 95       	ret

00000124 <init_adc>:

//조도센서 초기화
void init_adc(){
	ADMUX = 0x00;
 124:	17 b8       	out	0x07, r1	; 7
	ADCSRA = 0x87;
 126:	87 e8       	ldi	r24, 0x87	; 135
 128:	86 b9       	out	0x06, r24	; 6
}
 12a:	08 95       	ret

0000012c <setKitLed>:

//Kit 기본 LED를 count 만큼 켠다.
void setKitLed(int count){
	int i;

	PORTA = 0;
 12c:	1b ba       	out	0x1b, r1	; 27
	for(i=0;i<count;i++){
 12e:	20 e0       	ldi	r18, 0x00	; 0
 130:	30 e0       	ldi	r19, 0x00	; 0
		PORTA |= 1 << i;
 132:	41 e0       	ldi	r20, 0x01	; 1
 134:	50 e0       	ldi	r21, 0x00	; 0
//Kit 기본 LED를 count 만큼 켠다.
void setKitLed(int count){
	int i;

	PORTA = 0;
	for(i=0;i<count;i++){
 136:	0c c0       	rjmp	.+24     	; 0x150 <setKitLed+0x24>
		PORTA |= 1 << i;
 138:	eb b3       	in	r30, 0x1b	; 27
 13a:	ba 01       	movw	r22, r20
 13c:	02 2e       	mov	r0, r18
 13e:	02 c0       	rjmp	.+4      	; 0x144 <setKitLed+0x18>
 140:	66 0f       	add	r22, r22
 142:	77 1f       	adc	r23, r23
 144:	0a 94       	dec	r0
 146:	e2 f7       	brpl	.-8      	; 0x140 <setKitLed+0x14>
 148:	e6 2b       	or	r30, r22
 14a:	eb bb       	out	0x1b, r30	; 27
//Kit 기본 LED를 count 만큼 켠다.
void setKitLed(int count){
	int i;

	PORTA = 0;
	for(i=0;i<count;i++){
 14c:	2f 5f       	subi	r18, 0xFF	; 255
 14e:	3f 4f       	sbci	r19, 0xFF	; 255
 150:	28 17       	cp	r18, r24
 152:	39 07       	cpc	r19, r25
 154:	8c f3       	brlt	.-30     	; 0x138 <setKitLed+0xc>
		PORTA |= 1 << i;
	}
}
 156:	08 95       	ret

00000158 <setLight>:

//연결된 LED를 count만큼 켠다.
void setLight(int count){

}
 158:	08 95       	ret

0000015a <read_adc>:
//현재 조도 센서의 값을 읽어온다.
unsigned short read_adc()
{
	unsigned char adc_low, adc_high;
	unsigned short value;
	ADCSRA|=0x40;
 15a:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA & 0x10) !=0x10);
 15c:	34 9b       	sbis	0x06, 4	; 6
 15e:	fe cf       	rjmp	.-4      	; 0x15c <read_adc+0x2>
	adc_low=ADCL;
 160:	24 b1       	in	r18, 0x04	; 4
	adc_high=ADCH;
 162:	35 b1       	in	r19, 0x05	; 5
	value=((unsigned short)adc_high<<8)|(unsigned short)adc_low;
 164:	93 2f       	mov	r25, r19
 166:	80 e0       	ldi	r24, 0x00	; 0
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	28 2b       	or	r18, r24
 16c:	39 2b       	or	r19, r25
	return value;
}
 16e:	c9 01       	movw	r24, r18
 170:	08 95       	ret

00000172 <get_auto>:

//Auto 모드일때 조도 센서의 값에 따라서 켜질 LED의 개수를 얻는다.
int get_auto()
{
 172:	df 93       	push	r29
 174:	cf 93       	push	r28
 176:	00 d0       	rcall	.+0      	; 0x178 <get_auto+0x6>
 178:	cd b7       	in	r28, 0x3d	; 61
 17a:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned short value = 0;
 17c:	1a 82       	std	Y+2, r1	; 0x02
 17e:	19 82       	std	Y+1, r1	; 0x01
	
	value = read_adc();
 180:	0e 94 ad 00 	call	0x15a	; 0x15a <read_adc>
 184:	9a 83       	std	Y+2, r25	; 0x02
 186:	89 83       	std	Y+1, r24	; 0x01

	if(value<400)return 3;
 188:	89 81       	ldd	r24, Y+1	; 0x01
 18a:	9a 81       	ldd	r25, Y+2	; 0x02
 18c:	21 e0       	ldi	r18, 0x01	; 1
 18e:	80 39       	cpi	r24, 0x90	; 144
 190:	92 07       	cpc	r25, r18
 192:	88 f0       	brcs	.+34     	; 0x1b6 <get_auto+0x44>
	else if(value<600)return 2;
 194:	89 81       	ldd	r24, Y+1	; 0x01
 196:	9a 81       	ldd	r25, Y+2	; 0x02
 198:	22 e0       	ldi	r18, 0x02	; 2
 19a:	88 35       	cpi	r24, 0x58	; 88
 19c:	92 07       	cpc	r25, r18
 19e:	70 f0       	brcs	.+28     	; 0x1bc <get_auto+0x4a>
	else if(value<800)return 1;
 1a0:	89 81       	ldd	r24, Y+1	; 0x01
 1a2:	9a 81       	ldd	r25, Y+2	; 0x02
 1a4:	23 e0       	ldi	r18, 0x03	; 3
 1a6:	80 32       	cpi	r24, 0x20	; 32
 1a8:	92 07       	cpc	r25, r18
 1aa:	58 f0       	brcs	.+22     	; 0x1c2 <get_auto+0x50>
	else if(value<1000)return 0;
 1ac:	89 81       	ldd	r24, Y+1	; 0x01
 1ae:	9a 81       	ldd	r25, Y+2	; 0x02
 1b0:	20 e0       	ldi	r18, 0x00	; 0
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	08 c0       	rjmp	.+16     	; 0x1c6 <get_auto+0x54>
{
	volatile unsigned short value = 0;
	
	value = read_adc();

	if(value<400)return 3;
 1b6:	23 e0       	ldi	r18, 0x03	; 3
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	05 c0       	rjmp	.+10     	; 0x1c6 <get_auto+0x54>
	else if(value<600)return 2;
 1bc:	22 e0       	ldi	r18, 0x02	; 2
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <get_auto+0x54>
	else if(value<800)return 1;
 1c2:	21 e0       	ldi	r18, 0x01	; 1
 1c4:	30 e0       	ldi	r19, 0x00	; 0
	else if(value<1000)return 0;

	return 0;
}
 1c6:	c9 01       	movw	r24, r18
 1c8:	0f 90       	pop	r0
 1ca:	0f 90       	pop	r0
 1cc:	cf 91       	pop	r28
 1ce:	df 91       	pop	r29
 1d0:	08 95       	ret

000001d2 <show_adc>:

void show_adc()
{
 1d2:	df 93       	push	r29
 1d4:	cf 93       	push	r28
 1d6:	00 d0       	rcall	.+0      	; 0x1d8 <show_adc+0x6>
 1d8:	cd b7       	in	r28, 0x3d	; 61
 1da:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned short value = 0;
 1dc:	1a 82       	std	Y+2, r1	; 0x02
 1de:	19 82       	std	Y+1, r1	; 0x01
	setKitLed(1);
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 96 00 	call	0x12c	; 0x12c <setKitLed>
	while(1)
	{
		value = read_adc();
 1e8:	0e 94 ad 00 	call	0x15a	; 0x15a <read_adc>
 1ec:	9a 83       	std	Y+2, r25	; 0x02
 1ee:	89 83       	std	Y+1, r24	; 0x01
		//printf("value = %d\n",value);
		setKitLed(2);
 1f0:	82 e0       	ldi	r24, 0x02	; 2
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 96 00 	call	0x12c	; 0x12c <setKitLed>
		if(value<200)setKitLed(6);
 1f8:	89 81       	ldd	r24, Y+1	; 0x01
 1fa:	9a 81       	ldd	r25, Y+2	; 0x02
 1fc:	88 3c       	cpi	r24, 0xC8	; 200
 1fe:	91 05       	cpc	r25, r1
 200:	18 f4       	brcc	.+6      	; 0x208 <show_adc+0x36>
 202:	86 e0       	ldi	r24, 0x06	; 6
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	23 c0       	rjmp	.+70     	; 0x24e <show_adc+0x7c>
		else if(value<400)setKitLed(5);
 208:	89 81       	ldd	r24, Y+1	; 0x01
 20a:	9a 81       	ldd	r25, Y+2	; 0x02
 20c:	21 e0       	ldi	r18, 0x01	; 1
 20e:	80 39       	cpi	r24, 0x90	; 144
 210:	92 07       	cpc	r25, r18
 212:	18 f4       	brcc	.+6      	; 0x21a <show_adc+0x48>
 214:	85 e0       	ldi	r24, 0x05	; 5
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	1a c0       	rjmp	.+52     	; 0x24e <show_adc+0x7c>
		else if(value<600)setKitLed(4);
 21a:	89 81       	ldd	r24, Y+1	; 0x01
 21c:	9a 81       	ldd	r25, Y+2	; 0x02
 21e:	a2 e0       	ldi	r26, 0x02	; 2
 220:	88 35       	cpi	r24, 0x58	; 88
 222:	9a 07       	cpc	r25, r26
 224:	18 f4       	brcc	.+6      	; 0x22c <show_adc+0x5a>
 226:	84 e0       	ldi	r24, 0x04	; 4
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	11 c0       	rjmp	.+34     	; 0x24e <show_adc+0x7c>
		else if(value<800)setKitLed(3);
 22c:	89 81       	ldd	r24, Y+1	; 0x01
 22e:	9a 81       	ldd	r25, Y+2	; 0x02
 230:	b3 e0       	ldi	r27, 0x03	; 3
 232:	80 32       	cpi	r24, 0x20	; 32
 234:	9b 07       	cpc	r25, r27
 236:	18 f4       	brcc	.+6      	; 0x23e <show_adc+0x6c>
 238:	83 e0       	ldi	r24, 0x03	; 3
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	08 c0       	rjmp	.+16     	; 0x24e <show_adc+0x7c>
		else if(value<1000)setKitLed(2);
 23e:	89 81       	ldd	r24, Y+1	; 0x01
 240:	9a 81       	ldd	r25, Y+2	; 0x02
 242:	23 e0       	ldi	r18, 0x03	; 3
 244:	88 3e       	cpi	r24, 0xE8	; 232
 246:	92 07       	cpc	r25, r18
 248:	20 f4       	brcc	.+8      	; 0x252 <show_adc+0x80>
 24a:	82 e0       	ldi	r24, 0x02	; 2
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 96 00 	call	0x12c	; 0x12c <setKitLed>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 252:	8f e3       	ldi	r24, 0x3F	; 63
 254:	9d e0       	ldi	r25, 0x0D	; 13
 256:	a3 e0       	ldi	r26, 0x03	; 3
 258:	81 50       	subi	r24, 0x01	; 1
 25a:	90 40       	sbci	r25, 0x00	; 0
 25c:	a0 40       	sbci	r26, 0x00	; 0
 25e:	e1 f7       	brne	.-8      	; 0x258 <show_adc+0x86>
 260:	00 c0       	rjmp	.+0      	; 0x262 <show_adc+0x90>
 262:	00 00       	nop
 264:	c1 cf       	rjmp	.-126    	; 0x1e8 <show_adc+0x16>

00000266 <setNextState>:
//몇 개의 LED를 켜야하는지 저장하는 변수
volatile int ledCount = 0;

//전등을 다음 상태로 변경
void setNextState(){
	ledState = (ledState+1)%5;
 266:	80 91 02 01 	lds	r24, 0x0102
 26a:	90 91 03 01 	lds	r25, 0x0103
 26e:	01 96       	adiw	r24, 0x01	; 1
 270:	65 e0       	ldi	r22, 0x05	; 5
 272:	70 e0       	ldi	r23, 0x00	; 0
 274:	0e 94 bb 01 	call	0x376	; 0x376 <__divmodhi4>
 278:	90 93 03 01 	sts	0x0103, r25
 27c:	80 93 02 01 	sts	0x0102, r24
}
 280:	08 95       	ret

00000282 <onButtonClicked>:

//버튼이 클릭되었을 때 실행되는 함수, 전등을 다음 상태로 변경한다.
void onButtonClicked(){
	setNextState();
 282:	0e 94 33 01 	call	0x266	; 0x266 <setNextState>
}
 286:	08 95       	ret

00000288 <init_switch>:

//스위치 초기화
void init_switch(){
	DDRE = 0xcf; // 1100 1111, INT 4, 5
 288:	8f ec       	ldi	r24, 0xCF	; 207
 28a:	82 b9       	out	0x02, r24	; 2
	EICRB = 0x0a; // 0000 1010 INT 4, 5 => falling
 28c:	8a e0       	ldi	r24, 0x0A	; 10
 28e:	8a bf       	out	0x3a, r24	; 58
	EIMSK = 0x30; // 0011 0000 INT 4, 5
 290:	80 e3       	ldi	r24, 0x30	; 48
 292:	89 bf       	out	0x39, r24	; 57
	sei(); // SREG |= 1<<7; // 1000 0000
 294:	78 94       	sei
}
 296:	08 95       	ret

00000298 <init>:

//초기화 함수
void init(){
	//조도센서 초기화
	init_adc();
 298:	0e 94 92 00 	call	0x124	; 0x124 <init_adc>
#include <avr/io.h>                         // AVR 기본 include

//LED 초기화
void init_led(){
	// 전등(LED) 포트 = PA7~PA0 : 출력
	DDRA = 0xff;
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	8a bb       	out	0x1a, r24	; 26
	//LED 초기화
	init_led();
	//스위치 초기화
	init_switch();
 2a0:	0e 94 44 01 	call	0x288	; 0x288 <init_switch>
	//블루투스 초기화
	init_bluetooth();		
 2a4:	0e 94 5a 00 	call	0xb4	; 0xb4 <init_bluetooth>
}
 2a8:	08 95       	ret

000002aa <__vector_5>:

//스위치1
SIGNAL(SIG_INTERRUPT4){
 2aa:	1f 92       	push	r1
 2ac:	0f 92       	push	r0
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	0f 92       	push	r0
 2b2:	11 24       	eor	r1, r1
 2b4:	8f 93       	push	r24
 2b6:	9f 93       	push	r25
	isButtonClicked = TRUE;
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	90 93 01 01 	sts	0x0101, r25
 2c0:	80 93 00 01 	sts	0x0100, r24
}
 2c4:	9f 91       	pop	r25
 2c6:	8f 91       	pop	r24
 2c8:	0f 90       	pop	r0
 2ca:	0f be       	out	0x3f, r0	; 63
 2cc:	0f 90       	pop	r0
 2ce:	1f 90       	pop	r1
 2d0:	18 95       	reti

000002d2 <__vector_6>:

//스위치2
SIGNAL(SIG_INTERRUPT5){
 2d2:	1f 92       	push	r1
 2d4:	0f 92       	push	r0
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	0f 92       	push	r0
 2da:	11 24       	eor	r1, r1
 2dc:	8f 93       	push	r24
 2de:	9f 93       	push	r25
	isButtonClicked = TRUE;
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	90 93 01 01 	sts	0x0101, r25
 2e8:	80 93 00 01 	sts	0x0100, r24

}
 2ec:	9f 91       	pop	r25
 2ee:	8f 91       	pop	r24
 2f0:	0f 90       	pop	r0
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	0f 90       	pop	r0
 2f6:	1f 90       	pop	r1
 2f8:	18 95       	reti

000002fa <run>:
/**
 * 블루투스나 스위치의 명령이 들어왔을 때 적절한 처리를 하는 함수
 */
#define DEBUG 0

void run(){
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29

#else

	while(1)                       // 명령을 받아서 실행
    {
		isButtonClicked |= checkBluetooth();		
 2fe:	c0 91 00 01 	lds	r28, 0x0100
 302:	d0 91 01 01 	lds	r29, 0x0101
 306:	0e 94 76 00 	call	0xec	; 0xec <checkBluetooth>
 30a:	c8 2b       	or	r28, r24
 30c:	d9 2b       	or	r29, r25
 30e:	d0 93 01 01 	sts	0x0101, r29
 312:	c0 93 00 01 	sts	0x0100, r28

		if(isButtonClicked){
 316:	80 91 00 01 	lds	r24, 0x0100
 31a:	90 91 01 01 	lds	r25, 0x0101
 31e:	00 97       	sbiw	r24, 0x00	; 0
 320:	31 f0       	breq	.+12     	; 0x32e <run+0x34>
			setNextState();
 322:	0e 94 33 01 	call	0x266	; 0x266 <setNextState>
			isButtonClicked = FALSE;
 326:	10 92 01 01 	sts	0x0101, r1
 32a:	10 92 00 01 	sts	0x0100, r1
		}

		if(ledState==STATE_AUTO){
 32e:	80 91 02 01 	lds	r24, 0x0102
 332:	90 91 03 01 	lds	r25, 0x0103
 336:	84 30       	cpi	r24, 0x04	; 4
 338:	91 05       	cpc	r25, r1
 33a:	19 f4       	brne	.+6      	; 0x342 <run+0x48>
			ledCount = get_auto();
 33c:	0e 94 b9 00 	call	0x172	; 0x172 <get_auto>
 340:	04 c0       	rjmp	.+8      	; 0x34a <run+0x50>
		}
		else {
			ledCount = ledState;
 342:	80 91 02 01 	lds	r24, 0x0102
 346:	90 91 03 01 	lds	r25, 0x0103
 34a:	90 93 05 01 	sts	0x0105, r25
 34e:	80 93 04 01 	sts	0x0104, r24
		}

		setKitLed(ledCount);
 352:	80 91 04 01 	lds	r24, 0x0104
 356:	90 91 05 01 	lds	r25, 0x0105
 35a:	0e 94 96 00 	call	0x12c	; 0x12c <setKitLed>
		setLight(ledCount);
 35e:	80 91 04 01 	lds	r24, 0x0104
 362:	90 91 05 01 	lds	r25, 0x0105
 366:	cb cf       	rjmp	.-106    	; 0x2fe <run+0x4>

00000368 <main>:
}

int main()
{

    init();
 368:	0e 94 4c 01 	call	0x298	; 0x298 <init>
    
 	run();
 36c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <run>

}
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	08 95       	ret

00000376 <__divmodhi4>:
 376:	97 fb       	bst	r25, 7
 378:	09 2e       	mov	r0, r25
 37a:	07 26       	eor	r0, r23
 37c:	0a d0       	rcall	.+20     	; 0x392 <__divmodhi4_neg1>
 37e:	77 fd       	sbrc	r23, 7
 380:	04 d0       	rcall	.+8      	; 0x38a <__divmodhi4_neg2>
 382:	0c d0       	rcall	.+24     	; 0x39c <__udivmodhi4>
 384:	06 d0       	rcall	.+12     	; 0x392 <__divmodhi4_neg1>
 386:	00 20       	and	r0, r0
 388:	1a f4       	brpl	.+6      	; 0x390 <__divmodhi4_exit>

0000038a <__divmodhi4_neg2>:
 38a:	70 95       	com	r23
 38c:	61 95       	neg	r22
 38e:	7f 4f       	sbci	r23, 0xFF	; 255

00000390 <__divmodhi4_exit>:
 390:	08 95       	ret

00000392 <__divmodhi4_neg1>:
 392:	f6 f7       	brtc	.-4      	; 0x390 <__divmodhi4_exit>
 394:	90 95       	com	r25
 396:	81 95       	neg	r24
 398:	9f 4f       	sbci	r25, 0xFF	; 255
 39a:	08 95       	ret

0000039c <__udivmodhi4>:
 39c:	aa 1b       	sub	r26, r26
 39e:	bb 1b       	sub	r27, r27
 3a0:	51 e1       	ldi	r21, 0x11	; 17
 3a2:	07 c0       	rjmp	.+14     	; 0x3b2 <__udivmodhi4_ep>

000003a4 <__udivmodhi4_loop>:
 3a4:	aa 1f       	adc	r26, r26
 3a6:	bb 1f       	adc	r27, r27
 3a8:	a6 17       	cp	r26, r22
 3aa:	b7 07       	cpc	r27, r23
 3ac:	10 f0       	brcs	.+4      	; 0x3b2 <__udivmodhi4_ep>
 3ae:	a6 1b       	sub	r26, r22
 3b0:	b7 0b       	sbc	r27, r23

000003b2 <__udivmodhi4_ep>:
 3b2:	88 1f       	adc	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	5a 95       	dec	r21
 3b8:	a9 f7       	brne	.-22     	; 0x3a4 <__udivmodhi4_loop>
 3ba:	80 95       	com	r24
 3bc:	90 95       	com	r25
 3be:	bc 01       	movw	r22, r24
 3c0:	cd 01       	movw	r24, r26
 3c2:	08 95       	ret

000003c4 <_exit>:
 3c4:	f8 94       	cli

000003c6 <__stop_program>:
 3c6:	ff cf       	rjmp	.-2      	; 0x3c6 <__stop_program>
