
avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000286  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800100  00800100  000002fa  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000e3  00000000  00000000  00000a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000034e  00000000  00000000  00000b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001e8  00000000  00000000  00000e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a8  00000000  00000000  00001086  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00001430  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001a1  00000000  00000000  00001510  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c0  00000000  00000000  000016b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000038  00000000  00000000  00001771  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  6c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  70:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  74:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  78:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  7c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  80:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  84:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  88:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 30       	cpi	r26, 0x04	; 4
  a4:	b1 07       	cpc	r27, r17
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 13 01 	call	0x226	; 0x226 <main>
  ac:	0c 94 41 01 	jmp	0x282	; 0x282 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <init_uart1>:
 

void init_uart1()                               // UART1 초기화 함수
{

    UCSR1B = 0x18;           // 송신 Transmit(TX), Receive(RX) Enable
  b4:	88 e1       	ldi	r24, 0x18	; 24
  b6:	80 93 9a 00 	sts	0x009A, r24
    UCSR1C = 0x06;          // UART Mode, 8 Bit Data, No Parity, 1 Stop Bit
  ba:	86 e0       	ldi	r24, 0x06	; 6
  bc:	80 93 9d 00 	sts	0x009D, r24

    UBRR1H = 0;  // Baudrate 세팅
  c0:	10 92 98 00 	sts	0x0098, r1
    UBRR1L = 8;   // 16Mhz, 115200 baud
  c4:	88 e0       	ldi	r24, 0x08	; 8
  c6:	80 93 99 00 	sts	0x0099, r24

}
  ca:	08 95       	ret

000000cc <putchar1>:


void putchar1(char c)                      // 1 문자를 송신(Transmit)하는 함수
{

     while(!(UCSR1A & (1<<UDRE))) ;           // UDRE : UCSR1A 5번 비트, UDRE의 define값 = 5
  cc:	90 91 9b 00 	lds	r25, 0x009B
  d0:	95 ff       	sbrs	r25, 5
  d2:	fc cf       	rjmp	.-8      	; 0xcc <putchar1>
                                                                   // 즉, 1을 5번 왼쪽으로 shift한 값이므로 0x20과 &
     UDR1 = c;                                             // 1 문자 전송, 송신 데이터를 UDR0에 넣음
  d4:	80 93 9c 00 	sts	0x009C, r24
}
  d8:	08 95       	ret

000000da <getchar1>:
 

char getchar1()                               // 1 문자를 수신(receive)하는 함수
{

     while (!(UCSR1A & (1<<RXC1))) ;           // UCSR1A 7번 비트, RXC의 define 값 = 7
  da:	80 91 9b 00 	lds	r24, 0x009B
  de:	87 ff       	sbrs	r24, 7
  e0:	fc cf       	rjmp	.-8      	; 0xda <getchar1>
                                                                   // 즉, 1을 7번 왼쪽으로 shift한 값이므로 0x80과 &
     return(UDR1);                                       // 1 문자 수신, UDR1에서 수신 데이터를 가져옴
  e2:	80 91 9c 00 	lds	r24, 0x009C
}
  e6:	08 95       	ret

000000e8 <setNextState>:

volatile int isButtonClicked = FALSE;
volatile int ledState = STATE_OFF;

void setNextState(){
	ledState = (ledState+1)%5;
  e8:	80 91 02 01 	lds	r24, 0x0102
  ec:	90 91 03 01 	lds	r25, 0x0103
  f0:	01 96       	adiw	r24, 0x01	; 1
  f2:	65 e0       	ldi	r22, 0x05	; 5
  f4:	70 e0       	ldi	r23, 0x00	; 0
  f6:	0e 94 1a 01 	call	0x234	; 0x234 <__divmodhi4>
  fa:	90 93 03 01 	sts	0x0103, r25
  fe:	80 93 02 01 	sts	0x0102, r24
}
 102:	08 95       	ret

00000104 <setKitLed>:

//Kit 기본 LED를 켠다.
void setKitLed(int count){
	int i;

	PORTA = 0;
 104:	1b ba       	out	0x1b, r1	; 27
	for(i=0;i<count;i++){
 106:	20 e0       	ldi	r18, 0x00	; 0
 108:	30 e0       	ldi	r19, 0x00	; 0
		PORTA |= 1 << i;
 10a:	41 e0       	ldi	r20, 0x01	; 1
 10c:	50 e0       	ldi	r21, 0x00	; 0
//Kit 기본 LED를 켠다.
void setKitLed(int count){
	int i;

	PORTA = 0;
	for(i=0;i<count;i++){
 10e:	0c c0       	rjmp	.+24     	; 0x128 <setKitLed+0x24>
		PORTA |= 1 << i;
 110:	eb b3       	in	r30, 0x1b	; 27
 112:	ba 01       	movw	r22, r20
 114:	02 2e       	mov	r0, r18
 116:	02 c0       	rjmp	.+4      	; 0x11c <setKitLed+0x18>
 118:	66 0f       	add	r22, r22
 11a:	77 1f       	adc	r23, r23
 11c:	0a 94       	dec	r0
 11e:	e2 f7       	brpl	.-8      	; 0x118 <setKitLed+0x14>
 120:	e6 2b       	or	r30, r22
 122:	eb bb       	out	0x1b, r30	; 27
//Kit 기본 LED를 켠다.
void setKitLed(int count){
	int i;

	PORTA = 0;
	for(i=0;i<count;i++){
 124:	2f 5f       	subi	r18, 0xFF	; 255
 126:	3f 4f       	sbci	r19, 0xFF	; 255
 128:	28 17       	cp	r18, r24
 12a:	39 07       	cpc	r19, r25
 12c:	8c f3       	brlt	.-30     	; 0x110 <setKitLed+0xc>
		PORTA |= 1 << i;
	}
}
 12e:	08 95       	ret

00000130 <setLight>:

void setLight(){

}
 130:	08 95       	ret

00000132 <onButtonClicked>:

void onButtonClicked(){
	setNextState();
 132:	0e 94 74 00 	call	0xe8	; 0xe8 <setNextState>

}
 136:	08 95       	ret

00000138 <init>:

void init(){
	// 전등(LED) 포트 = PA7~PA0 : 출력
	DDRA = 0xff;		
 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	8a bb       	out	0x1a, r24	; 26
	// Dimmer LED 포트 = PB5 : 출력
	//DDRB = 0x01 << 5;	
	//ADC 초기화
	ADMUX = 0x00;
 13c:	17 b8       	out	0x07, r1	; 7
	ADCSRA = 0x87;
 13e:	87 e8       	ldi	r24, 0x87	; 135
 140:	86 b9       	out	0x06, r24	; 6
	init_uart1();		// UART1 초기화
 142:	0e 94 5a 00 	call	0xb4	; 0xb4 <init_uart1>
}
 146:	08 95       	ret

00000148 <checkBluetooth>:

void checkBluetooth(){
 148:	df 93       	push	r29
 14a:	cf 93       	push	r28
 14c:	0f 92       	push	r0
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
	volatile char c = getchar1();     // 스마트폰으로부터 명령(데이터)을 받아서
 152:	0e 94 6d 00 	call	0xda	; 0xda <getchar1>
 156:	89 83       	std	Y+1, r24	; 0x01
	if(c==1){
 158:	89 81       	ldd	r24, Y+1	; 0x01
 15a:	81 30       	cpi	r24, 0x01	; 1
 15c:	39 f4       	brne	.+14     	; 0x16c <checkBluetooth+0x24>
		isButtonClicked = TRUE;
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	90 93 01 01 	sts	0x0101, r25
 166:	80 93 00 01 	sts	0x0100, r24
		c = 0;
 16a:	19 82       	std	Y+1, r1	; 0x01
	}
}
 16c:	0f 90       	pop	r0
 16e:	cf 91       	pop	r28
 170:	df 91       	pop	r29
 172:	08 95       	ret

00000174 <read_adc>:

unsigned short read_adc()
{
	unsigned char adc_low, adc_high;
	unsigned short value;
	ADCSRA|=0x40;
 174:	36 9a       	sbi	0x06, 6	; 6
	while((ADCSRA & 0x10) !=0x10);
 176:	34 9b       	sbis	0x06, 4	; 6
 178:	fe cf       	rjmp	.-4      	; 0x176 <read_adc+0x2>
	adc_low=ADCL;
 17a:	24 b1       	in	r18, 0x04	; 4
	adc_high=ADCH;
 17c:	35 b1       	in	r19, 0x05	; 5
	value=((unsigned short)adc_high<<8)|(unsigned short)adc_low;
 17e:	93 2f       	mov	r25, r19
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	28 2b       	or	r18, r24
 186:	39 2b       	or	r19, r25
	return value;
}
 188:	c9 01       	movw	r24, r18
 18a:	08 95       	ret

0000018c <show_adc>:

void show_adc()
{
 18c:	df 93       	push	r29
 18e:	cf 93       	push	r28
 190:	00 d0       	rcall	.+0      	; 0x192 <show_adc+0x6>
 192:	cd b7       	in	r28, 0x3d	; 61
 194:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned short value = 0;
 196:	1a 82       	std	Y+2, r1	; 0x02
 198:	19 82       	std	Y+1, r1	; 0x01
	setKitLed(1);
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 82 00 	call	0x104	; 0x104 <setKitLed>
	while(1)
	{
		value = read_adc();
 1a2:	0e 94 ba 00 	call	0x174	; 0x174 <read_adc>
 1a6:	9a 83       	std	Y+2, r25	; 0x02
 1a8:	89 83       	std	Y+1, r24	; 0x01
		//printf("value = %d\n",value);
		setKitLed(2);
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 82 00 	call	0x104	; 0x104 <setKitLed>
		if(value<200)setKitLed(6);
 1b2:	89 81       	ldd	r24, Y+1	; 0x01
 1b4:	9a 81       	ldd	r25, Y+2	; 0x02
 1b6:	88 3c       	cpi	r24, 0xC8	; 200
 1b8:	91 05       	cpc	r25, r1
 1ba:	18 f4       	brcc	.+6      	; 0x1c2 <show_adc+0x36>
 1bc:	86 e0       	ldi	r24, 0x06	; 6
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	23 c0       	rjmp	.+70     	; 0x208 <show_adc+0x7c>
		else if(value<400)setKitLed(5);
 1c2:	89 81       	ldd	r24, Y+1	; 0x01
 1c4:	9a 81       	ldd	r25, Y+2	; 0x02
 1c6:	21 e0       	ldi	r18, 0x01	; 1
 1c8:	80 39       	cpi	r24, 0x90	; 144
 1ca:	92 07       	cpc	r25, r18
 1cc:	18 f4       	brcc	.+6      	; 0x1d4 <show_adc+0x48>
 1ce:	85 e0       	ldi	r24, 0x05	; 5
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	1a c0       	rjmp	.+52     	; 0x208 <show_adc+0x7c>
		else if(value<600)setKitLed(4);
 1d4:	89 81       	ldd	r24, Y+1	; 0x01
 1d6:	9a 81       	ldd	r25, Y+2	; 0x02
 1d8:	a2 e0       	ldi	r26, 0x02	; 2
 1da:	88 35       	cpi	r24, 0x58	; 88
 1dc:	9a 07       	cpc	r25, r26
 1de:	18 f4       	brcc	.+6      	; 0x1e6 <show_adc+0x5a>
 1e0:	84 e0       	ldi	r24, 0x04	; 4
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	11 c0       	rjmp	.+34     	; 0x208 <show_adc+0x7c>
		else if(value<800)setKitLed(3);
 1e6:	89 81       	ldd	r24, Y+1	; 0x01
 1e8:	9a 81       	ldd	r25, Y+2	; 0x02
 1ea:	b3 e0       	ldi	r27, 0x03	; 3
 1ec:	80 32       	cpi	r24, 0x20	; 32
 1ee:	9b 07       	cpc	r25, r27
 1f0:	18 f4       	brcc	.+6      	; 0x1f8 <show_adc+0x6c>
 1f2:	83 e0       	ldi	r24, 0x03	; 3
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	08 c0       	rjmp	.+16     	; 0x208 <show_adc+0x7c>
		else if(value<1000)setKitLed(2);
 1f8:	89 81       	ldd	r24, Y+1	; 0x01
 1fa:	9a 81       	ldd	r25, Y+2	; 0x02
 1fc:	23 e0       	ldi	r18, 0x03	; 3
 1fe:	88 3e       	cpi	r24, 0xE8	; 232
 200:	92 07       	cpc	r25, r18
 202:	20 f4       	brcc	.+8      	; 0x20c <show_adc+0x80>
 204:	82 e0       	ldi	r24, 0x02	; 2
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 82 00 	call	0x104	; 0x104 <setKitLed>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20c:	8f e3       	ldi	r24, 0x3F	; 63
 20e:	9d e0       	ldi	r25, 0x0D	; 13
 210:	a3 e0       	ldi	r26, 0x03	; 3
 212:	81 50       	subi	r24, 0x01	; 1
 214:	90 40       	sbci	r25, 0x00	; 0
 216:	a0 40       	sbci	r26, 0x00	; 0
 218:	e1 f7       	brne	.-8      	; 0x212 <show_adc+0x86>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <show_adc+0x90>
 21c:	00 00       	nop
 21e:	c1 cf       	rjmp	.-126    	; 0x1a2 <show_adc+0x16>

00000220 <run>:
#define DEBUG 1

void run(){

#if DEBUG
	show_adc();
 220:	0e 94 c6 00 	call	0x18c	; 0x18c <show_adc>

         
    }

#endif
}
 224:	08 95       	ret

00000226 <main>:

int main()
{

    init();
 226:	0e 94 9c 00 	call	0x138	; 0x138 <init>
#define DEBUG 1

void run(){

#if DEBUG
	show_adc();
 22a:	0e 94 c6 00 	call	0x18c	; 0x18c <show_adc>

    init();
    
 	run();

}
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	08 95       	ret

00000234 <__divmodhi4>:
 234:	97 fb       	bst	r25, 7
 236:	09 2e       	mov	r0, r25
 238:	07 26       	eor	r0, r23
 23a:	0a d0       	rcall	.+20     	; 0x250 <__divmodhi4_neg1>
 23c:	77 fd       	sbrc	r23, 7
 23e:	04 d0       	rcall	.+8      	; 0x248 <__divmodhi4_neg2>
 240:	0c d0       	rcall	.+24     	; 0x25a <__udivmodhi4>
 242:	06 d0       	rcall	.+12     	; 0x250 <__divmodhi4_neg1>
 244:	00 20       	and	r0, r0
 246:	1a f4       	brpl	.+6      	; 0x24e <__divmodhi4_exit>

00000248 <__divmodhi4_neg2>:
 248:	70 95       	com	r23
 24a:	61 95       	neg	r22
 24c:	7f 4f       	sbci	r23, 0xFF	; 255

0000024e <__divmodhi4_exit>:
 24e:	08 95       	ret

00000250 <__divmodhi4_neg1>:
 250:	f6 f7       	brtc	.-4      	; 0x24e <__divmodhi4_exit>
 252:	90 95       	com	r25
 254:	81 95       	neg	r24
 256:	9f 4f       	sbci	r25, 0xFF	; 255
 258:	08 95       	ret

0000025a <__udivmodhi4>:
 25a:	aa 1b       	sub	r26, r26
 25c:	bb 1b       	sub	r27, r27
 25e:	51 e1       	ldi	r21, 0x11	; 17
 260:	07 c0       	rjmp	.+14     	; 0x270 <__udivmodhi4_ep>

00000262 <__udivmodhi4_loop>:
 262:	aa 1f       	adc	r26, r26
 264:	bb 1f       	adc	r27, r27
 266:	a6 17       	cp	r26, r22
 268:	b7 07       	cpc	r27, r23
 26a:	10 f0       	brcs	.+4      	; 0x270 <__udivmodhi4_ep>
 26c:	a6 1b       	sub	r26, r22
 26e:	b7 0b       	sbc	r27, r23

00000270 <__udivmodhi4_ep>:
 270:	88 1f       	adc	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	5a 95       	dec	r21
 276:	a9 f7       	brne	.-22     	; 0x262 <__udivmodhi4_loop>
 278:	80 95       	com	r24
 27a:	90 95       	com	r25
 27c:	bc 01       	movw	r22, r24
 27e:	cd 01       	movw	r24, r26
 280:	08 95       	ret

00000282 <_exit>:
 282:	f8 94       	cli

00000284 <__stop_program>:
 284:	ff cf       	rjmp	.-2      	; 0x284 <__stop_program>
